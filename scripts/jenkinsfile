pipeline {
    agent any

    parameters {
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    dir("terraform") {
                        git "https://github.com/popsi-techy/first-terraform-jenkins.git"
                    }
                }
            }
        }

        stage('Validate') {
            steps {
                script {
                    sh "cd terraform/ && terraform validate"
                }
            }
        }

        stage('Plan') {
            steps {
                script {
                    dir("terraform") {
                        sh 'terraform init'
                        sh 'terraform plan -out tfplan'
                        sh 'terraform show -no-color tfplan > tfplan.txt'
                    }
                }
            }
        }

        stage('Approval') {
            when {
                expression { params.autoApprove == false }
            }

            steps {
                script {
                    def plan = readFile 'terraform/tfplan.txt'
                    input message: "Review the Terraform plan",
                          parameters: [text(name: 'Plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply') {
            when {
                expression { params.autoApprove || currentBuild.resultIsBetterOrEqualTo('UNSTABLE') }
            }

            steps {
                script {
                    dir("terraform") {
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }

        stage('Destroy') {
            steps {
                script {
                    dir("terraform") {
                        sh 'terraform init'

                        def confirmation = input(
                            message: 'Are you sure you want to destroy the infrastructure?',
                            parameters: [booleanParam(defaultValue: false, description: 'Yes, I am sure')]
                        )

                        if (confirmation) {
                            sh 'terraform destroy -auto-approve'
                        } else {
                            echo 'Infrastructure destruction aborted by the user.'
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }

        success {
            echo 'Build successful!'
        }
        failure {
            echo 'Build not successful!'
        }
    }
}

